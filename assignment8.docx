Q1.What is Collection in Java?
Ans. The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects. Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion. Java Collection means a single unit of objects.

Q2. Differentiate between Collection and collections in the context of Java.
Ans. Collection is used to represent a single unit with a group of individual objects whereas collections is used to operate on collection with several utility methods. Since java 8, collection is an interface with static as well as abstract and default methods whereas collections operate only with static methods.

Q3. What are the advantages of the Collection framework?
Ans. The primary advantages of a collections framework are that it: Reduces programming effort by providing data structures and algorithms so you don't have to write them yourself. Increases performance by providing high-performance implementations of data structures and algorithms.

Q4.Explain the various interfaces used in the Collection framework.
Ans. The core collection interfaces within the Java Collection framework are as follows:
List: The List interface extends the Collection interface and represents an ordered collection of elements. Lists allow duplicate elements and maintain the insertion order. Common implementations of List include ArrayList, LinkedList, and Vector.
Set: The Set interface, also an extension of the Collection interface, represents a collection that does not allow duplicate elements. Sets typically do not maintain a specific order of elements. Notable implementations of Set are HashSet, TreeSet, and LinkedHashSet.
Queue: The Queue interface defines a collection that represents a waiting area, where elements are inserted at one end and removed from the other. Queues follow the First-In-First-Out (FIFO) principle. Notable implementations of Queue include LinkedList and PriorityQueue.
Deque: The Deque interface extends the Queue interface and represents a double-ended queue, allowing elements to be inserted and removed from both ends. Deques support operations at both ends, enabling flexibility in data handling. Common implementations of Deque include ArrayDeque and LinkedList.
Map: The Map interface represents a mapping between unique keys and corresponding values. It does not extend the Collection interface but is an important part of the Java Collection framework. Maps do not allow duplicate keys and are commonly used for key-value pair associations. Notable implementations of Map include HashMap, TreeMap, and LinkedHashMap.
Q5.Differentiate between List and Set in Java.
Ans. 
List
Set
1. The List is an indexed sequence.
1. The Set is an non-indexed sequence.
2. List allows duplicate elements
2. Set doesnâ€™t allow duplicate elements.
3. Elements by their position can be accessed.
3. Position access to elements is not allowed.
4. Multiple null elements can be stored.
4. Null element can store only once.
5. List implementations are ArrayList, LinkedList, Vector, Stack
5. Set implementations are HashSet, LinkedHashSet.


Q6.What is the Differentiate between Iterator and ListIterator in Java.
Ans. The basic difference between Iterator and ListIterator is that both being cursor, Iterator can traverse elements in a collection only in forward direction. On the other hand, the ListIterator can traverse in both forward and backward directions. Using iterator you can not add any element to a collection.

Q7.What is the Differentiate between Comparable and Comparator
Ans. Comparable and comparator are both interfaces in the Java programming language to determine the behaviour in which classes will be implemented. While Comparable is used on objects that are naturally ordered, the Comparator interface implements sorting by taking the attributes of an object into consideration.

Q8.What is collision in HashMap?
Ans.  A collision, or more specifically, a hash code collision in a HashMap, is a situation where two or more key objects produce the same final hash value and hence point to the same bucket location or array index.


Q9.Distinguish between a hashmap and a Treemap.
Ans. HashMap allows heterogeneous elements because it does not perform sorting on keys. TreeMap allows homogeneous values as a key because of sorting.

Q10.Define LinkedHashMap in Java
Ans. A LinkedHashMap contains values based on the key. It implements the Map interface and extends the HashMap class. It contains only unique elements. It may have one null key and multiple null values.
